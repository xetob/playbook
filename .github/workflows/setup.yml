name: FoxetGSI-builder

on:
  workflow_dispatch:
    inputs:
      rom_type:
        description: 'Type of ROM (e.g., Pixel, AOSP)'
        required: true
        default: 'Pixel'
      rom_link:
        description: 'Link to the ROM file'
        required: true
        default: 'https://dl.google.com/dl/android/aosp/barbet-sp1a.210812.015-factory-13f4d9f2.zip'
      rom_type_option:
        description: 'Type of GSI (AB or A-only)'
        required: true
        default: 'AB'

jobs:
  Build_GSI:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone FoxetGSI-tool with submodules
        run: |
          git clone --recurse-submodules https://github.com/FoxetGSI/FoxetGSI-tool.git
          cd FoxetGSI-tool

      - name: Install packages
        run: |
          cd FoxetGSI-tool
          sudo bash setup.sh

      - name: Build GSI
        env:
          ROM_TYPE: ${{ github.event.inputs.rom_type }} # Используем входные параметры
          ROM_LINK: ${{ github.event.inputs.rom_link }} # Используем входные параметры
          ROM_TYPE_OPTION: ${{ github.event.inputs.rom_type_option }} # Новое значение
        run: |
          cd FoxetGSI-tool
          if [ "$ROM_TYPE_OPTION" == "AB" ]; then
            sudo bash url2GSI.sh $ROM_LINK $ROM_TYPE --ab
          else
            sudo bash url2GSI.sh $ROM_LINK $ROM_TYPE --aonly
          fi

        - name: Find .img files
        id: find_images
        run: |
          echo "Finding .img files..."
          files=$(find FoxetGSI-tool/output -name "*.img")
          if [ -z "$files" ]; then
            echo "No .img files found."
            echo "::set-output name=files::"
          else
            echo "Found .img files:"
            echo "$files"
            echo "::set-output name=files::$files"
          fi

      - name: Create Release
        id: create_release
        run: |
          if [ -z "${{ steps.find_images.outputs.files }}" ]; then
            echo "No files to upload. Exiting."
            exit 0
          fi

          TAG=$(echo "${GITHUB_REF}" | sed 's|refs/tags/||')
          echo "Creating release for tag $TAG..."

          response=$(curl -s -X POST 
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" 
            -H "Accept: application/vnd.github.v3+json" 
            https://api.github.com/repos/${{ github.repository }}/releases 
            -d '{
              "tag_name": "'"$TAG"'",
              "name": "'"Release $TAG"'",
              "body": "Automated upload of .img files"
            }')

          echo "Release created: $response"

          RELEASE_ID=$(echo "$response" | jq -r .id)

      - name: Upload .img files to Release
        if: steps.find_images.outputs.files != ''
        run: |
          IFS=' ' read -r -a files <<< "${{ steps.find_images.outputs.files }}"
          for file in "${files[@]}"; do
            echo "Uploading $file..."
            curl -s -X POST 
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" 
              -H "Content-Type: $(file --mime-type -b "$file")" 
              --data-binary @"$file" 
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename "$file")"
          done
